{"body":"# Marionetta\r\n\r\n[Marionetta][marionetta] is a ruby library for executing\r\ncommands on one or more remote machines via SSH.\r\n\r\n[marionetta]: http://drpheltright.github.com/marionetta/\r\n\r\nIt provides puppet provisioning without the need for a puppet\r\nmaster and can also deploy your application code (with\r\nrollbacks) via rsync. With a RakeHelper you can integrate it\r\ninto your workflow with ease.\r\n\r\nInstalling the gem is the best way to start using Marionetta.\r\nYou can do this from command line:\r\n\r\n```\r\ngem install marionetta\r\n```\r\n\r\nOr – better yet – in your Gemfile:\r\n\r\n``` ruby\r\nsource 'http://rubygems.org'\r\ngem 'marionetta'\r\n```\r\n\r\n## Documentation\r\n\r\nThe majority of documentation can be found on the\r\n[source annotations][docs] which are written primarily at\r\ndescribing the usage of the library.\r\n\r\n[docs]: http://drpheltright.github.com/marionetta/docs/marionetta.html\r\n\r\n## Using Marionetta in your Rakefile\r\n\r\nMarionetta provides an easy mechanism to generate rake tasks\r\nfor each of your groups.\r\n\r\nIn your Rakefile you can do something like so:\r\n\r\n``` ruby\r\nrequire 'marionetta/group'\r\nrequire 'marionetta/rake_helper'\r\n\r\nstaging = Marionetta::Group.new(:staging)\r\n\r\nstaging.add_server do |s|\r\n  s[:hostname] = 'staging.example.com'\r\n  s[:ssh][:flags] << ['-i', 'keys/private.key']\r\n  s[:puppet][:manifest] = 'puppet/manifest.pp'\r\n  s[:deployer][:from] = '/my-app'\r\n  s[:deployer][:to] = '/home/staging/www'\r\nend\r\n\r\nMarionetta::RakeHelper.install_group_tasks(staging)\r\n```\r\n\r\nThe tasks `puppet:staging:install`, `puppet:staging:update`,\r\n`deployer:staging:deploy` and `deployer:staging:rollback`\r\nwill now be available in your Rakefile.\r\n\r\n## Defining a group of servers\r\n\r\nMarionetta allows you to describe and manipulate a number of\r\nservers in parallel via SSH. First you need to define a group\r\nof servers:\r\n\r\n``` ruby\r\nrequire 'marionetta/group'\r\n\r\nservers = Marionetta::Group.new(:production)\r\n\r\nservers.add_server do |s|\r\n  s[:hostname] = 'ubuntu@example.com'\r\nend\r\n\r\nservers.add_server do |s|\r\n  s[:hostname] = 'another@host.com'\r\n  s[:ssh][:flags] << ['-i', 'keys/private.key']\r\nend\r\n```\r\n\r\n## Looping over a group\r\n\r\nContinuing on from our example of defining a group of servers\r\nabove, we will now iterate over the servers:\r\n\r\n``` ruby\r\n# Each block executes in it's own asynchronous thread\r\nservers.each_server do |s|\r\n  cmd = Marionetta::CommandRunner.new(s)\r\n\r\n  # Send a command via SSH\r\n  cmd.ssh('whoami') do |out, err|\r\n    puts out.read\r\n  end\r\n\r\n  # Get a file\r\n  cmd.get('/var/backups/database')\r\n\r\n  # Put a file\r\n  cmd.put('/etc/motd')\r\nend\r\n```\r\n\r\n## Playing puppet master\r\n\r\nInstead of running a puppet master server you can use\r\nMarionetta to orchestrate a number instances.\r\n\r\n``` ruby\r\nrequire 'marionetta/group'\r\n\r\nservers = Marionetta::Group.new(:production)\r\n\r\nservers.add_server do |s|\r\n  s[:hostname] = 'ubuntu@example.com'\r\n  s[:puppet][:manifest] = 'puppet/manifest.pp'\r\n  s[:puppet][:modules] = 'puppet/modules'\r\nend\r\n\r\n# Install and update puppet on each server according to\r\n# each servers puppet settings\r\nservers.manipulate_each_server(:puppet, :update)\r\n```\r\n\r\n## Using the deployer\r\n\r\nAlso included is a deployment mechanism similar to capistrano.\r\nYou can use this to deploy releases of folders from a local\r\nmachine to a remote one over SSH.\r\n\r\n``` ruby\r\nrequire 'marionetta/group'\r\n\r\nstaging = Marionetta::Group.new(:staging)\r\n\r\nstaging.add_server do |s|\r\n  s[:hostname] = 'staging.example.com'\r\n  s[:deployer][:from] = '/my-app'\r\n  s[:deployer][:to] = '/home/staging/www'\r\nend\r\n\r\nstaging.manipulate_each_server(:deployer, :deploy)\r\n```\r\n\r\nThe deployer also supports listing releases:\r\n\r\n``` ruby\r\nstaging.manipulate_each_server(:deployer, :releases) do |server, releases|\r\n  puts server[:hostname], releases\r\nend\r\n```\r\n\r\nOh and you can rollback to the last release too!\r\n\r\n``` ruby\r\nstaging.manipulate_each_server(:deployer, :rollback)\r\n```\r\n\r\n## Author\r\n\r\nLuke Morton a.k.a. DrPheltRight\r\n\r\n## License\r\n\r\nMIT","tagline":"A ruby library for executing commands on one or more remote machines via SSH","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Marionetta"}